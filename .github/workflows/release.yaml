name: Versioned Release

on:
  push:
    branches:
      - main
  pull_request:
    types: [ labeled, opened ]


permissions:
  actions: write
  contents: write
  pull-requests: write

#jobs:
#  use-template:
#    uses: openkcm/pipeline-template/.github/workflows/release.yaml@main
#    with:
#      go-version: '1.24'
#      app-name: 'dummy-service'

jobs:
  release_tag:
    name: Release version
    runs-on: ubuntu-24.04
    steps:
      - name: Install GPG
        run: sudo apt-get install -y gnupg

      - name: Import GPG Key
        run: |
          echo "$GPG_PRIVATE_KEY" | gpg --batch --import
          KEY_ID=$(gpg --list-secret-keys --with-colons | grep '^sec' | cut -d: -f5)
          echo "Using GPG key: $KEY_ID"
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}

      - name: Configure Git for GPG
        run: |
          git config --global user.name "GitHub CI Bot"
          git config --global user.email "github-ci[bot]@users.noreply.github.com"
          git config --global commit.gpgsign true
          git config --global user.signingkey "${{ secrets.GPG_KEY_ID }}"
          git config --global gpg.program gpg

      - name: Generate token from GitHub App
        id: generate-token
        uses: tibdex/github-app-token@3beb63f4bd073e61482598c45c71c1019b59b73a # v2.1.0
        with:
          app_id: ${{ secrets.APP_PUSH_TAG_ID }}
          private_key: ${{ secrets.APP_PUSH_TAG_PRIVATE_KEY }}

      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          token: ${{ steps.generate-token.outputs.token }}
          fetch-tags: true
          fetch-depth: 0
          submodules: recursive

      - name: Extract repository name
        id: repo
        run: |
          echo "repo_name=$(basename "$GITHUB_REPOSITORY")" >> $GITHUB_ENV

      - name: Fetch Tags
        run: git fetch --tags

      - name: Check if Release Label is Set
        id: check_label
        run: |
          release_label_set=false
          
           # Only check labels if the event is a pull request
          if jq -e '.pull_request != null' "$GITHUB_EVENT_PATH" > /dev/null; then
            labels=$(jq -r '.pull_request.labels // [] | .[].name' "$GITHUB_EVENT_PATH")
            if echo "$labels" | grep -q "release"; then
              release_label_set=true
            fi
          fi
          
          echo "release_label_set=$release_label_set" >> $GITHUB_ENV
          echo "release_label_set=$release_label_set"

      - name: Determine Next Version
        id: set-version
        run: |
          if [[ "${{ env.release_label_set }}" == "true" ]]; then
            latest_tag=$(git describe --tags $(git rev-list --tags --max-count=1) 2>/dev/null || echo "v0.0.0")
            echo "Latest tag: $latest_tag"

            # Extract version components
            major=$(echo $latest_tag | cut -d. -f1 | tr -d 'v')
            minor=$(echo $latest_tag | cut -d. -f2)
            patch=$(echo $latest_tag | cut -d. -f3)

            echo "Current version: $major.$minor.$patch"

            if [[ $GITHUB_EVENT_NAME == "pull_request" ]]; then
              if jq -r '.pull_request.labels[].name' $GITHUB_EVENT_PATH | grep -q "major"; then
                major=$((major + 1))
                minor=0
                patch=0
              elif jq -r '.pull_request.labels[].name' $GITHUB_EVENT_PATH | grep -q "minor"; then
                minor=$((minor + 1))
                patch=0
              else
                patch=$((patch + 1))
              fi
            fi

            next_version="v$major.$minor.$patch"
            nacked_next_version="$major.$minor.$patch"

            echo "Next version: $next_version"

            echo "next_version=$next_version" >> $GITHUB_ENV
            echo "version=$next_version" >> $GITHUB_ENV
            echo "nacked_next_version=$nacked_next_version" >> $GITHUB_ENV
            echo "$next_version" > VERSION

            if git rev-parse "refs/tags/$version" >/dev/null 2>&1; then
              echo "Tag $version already exists. Skipping release."
              echo "SKIP=true" >> $GITHUB_ENV
              exit 0
            fi
          fi

      - name: Generate Build Version
        if: ${{ env.SKIP != 'true' }}
        uses: hashicorp/actions-generate-metadata@f6f1ca9cededa05d841a58d171064faf3de8ec74 #main
        id: execute
        with:
          repositoryOwner: ${{ github.repository_owner }}
          repository: ${{ github.repository }}
          version: cat VERSION
          product: ${{ env.repo_name }}
          metadataFileName: ${{ github.workspace }}/build_version.json

      - name: Print Build Version
        if: ${{ env.SKIP != 'true' }}
        shell: bash
        run: cat ${{ github.workspace }}/build_version.json

      - name: Checkout build (taskfiles) repo
        if: ${{ env.SKIP != 'true' }}
        run: |
          git clone https://github.com/openkcm/build.git ./hack/common

      - name: Install Task
        if: ${{ env.SKIP != 'true' }}
        uses: arduino/setup-task@b91d5d2c96a56797b48ac1e0e89220bf64044611 #v2.0.0
        with:
          version: 3.x
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Git tag
        if: ${{ env.SKIP != 'true' }}
        run: |
          AUTHOR_NAME=$(git log -1 --pretty=format:'%an')
          AUTHOR_EMAIL=$(git log -1 --pretty=format:'%ae')
          echo "Tagging as $AUTHOR_NAME <$AUTHOR_EMAIL>"
          
          echo "AUTHOR_NAME=$AUTHOR_NAME" >> $GITHUB_ENV
          echo "AUTHOR_EMAIL=$AUTHOR_EMAIL" >> $GITHUB_ENV
          
          git config user.name "$AUTHOR_NAME"
          git config user.email "$AUTHOR_EMAIL"
          
          git tag -a "${{ env.version }}" -m "Release ${{ env.version }}"
          git push origin "${{ env.version }}"
        env:
          GITHUB_TOKEN: ${{ steps.generate-token.outputs.token }}

      - name: Build Changelog
        if: ${{ env.SKIP != 'true' }}
        id: github_release
        uses: mikepenz/release-changelog-builder-action@5fb6e51e44d4aea73f66549f425aa3ed5008109e # v5
        with:
          mode: "PR"
          configurationJson: |
            {
              "template": "#{{CHANGELOG}}",
              "pr_template": "- #{{TITLE}}: ##{{NUMBER}}",
              "categories": [
                {
                    "title": "## Feature",
                    "labels": ["feat", "feature"]
                },
                {
                    "title": "## Fix",
                    "labels": ["fix", "bug"]
                },
                {
                    "title": "## Other",
                    "labels": []
                }
              ],
              "label_extractor": [
                {
                  "pattern": "^(build|chore|ci|docs|feat|fix|perf|refactor|revert|style|test){1}(\\([\\w\\-\\.]+\\))?(!)?: ([\\w ])+([\\s\\S]*)",
                  "on_property": "title",
                  "target": "$1"
                }
              ]
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update to the next version
        if: ${{ env.SKIP != 'true' }}
        run: |
          task release:update-repo-version --verbose -- "${{ env.next_version }}-dev"
#          task release:update-charts-version --verbose -- "${{ env.nacked_next_version }}"
#          task release:update-charts-appVersion --verbose -- "${{ env.next_version }}"
#          task release:update-charts-values-image-tag --verbose -- "${{ env.next_version }}"

      - name: Generate SBOM
        if: ${{ env.SKIP != 'true' }}
        run: |
          task cyclonedxgomod:app --verbose

      - name: Create GitHub release
        if: ${{ env.SKIP != 'true' }}
        uses: softprops/action-gh-release@72f2c25fcb47643c292f7107632f7a47c1df5cd8 # v2.3.2
        with:
          tag_name: ${{ env.version }}
          name: Release ${{ env.version }}
          body: ${{steps.github_release.outputs.changelog}}
          files: "*sbom.json"
          draft: true
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

