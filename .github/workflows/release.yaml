name: Versioned Release

on:
  pull_request_review:
    types: [ submitted ]
  workflow_run:
    workflows: [ "REUSE Compliance Check", "ci" ]
    types:
      - completed
  pull_request:
    types: [ labeled ]

permissions:
  pull-requests: read
  contents: read
  checks: read

concurrency:
  group: pr-${{ github.event.pull_request.number }}-label
  cancel-in-progress: true

jobs:
  release:
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    name: Release version
    runs-on: ubuntu-24.04
    steps:
      - name: Short delay to group multiple label events
        run: sleep 5
      - name: Find PR associated with commit
        id: find_pr
        uses: actions/github-script@v7
        with:
          script: |
            const prs = await github.rest.repos.listPullRequestsAssociatedWithCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: '${{ github.event.workflow_run.head_sha }}'
            });
            
            if (prs.data.length === 0) {
              core.setFailed('No PR found for commit');
              return;
            }
            
            const pr = prs.data[0];
            core.setOutput('pr_number', pr.number);
            core.setOutput('has_release_label', pr.labels.some(l => l.name === 'release'));

      - name: Check PR approval
        id: check_approval
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = ${{ steps.find_pr.outputs.pr_number }};
            const reviews = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber,
            });

            const approved = reviews.data.some(r => r.state === 'APPROVED');
            core.setOutput('approved', approved);

      - name: Exit if not approved or missing label
        if: steps.check_approval.outputs.approved != 'true' || steps.find_pr.outputs.has_release_label != 'true'
        run: |
          echo "❌ Skipping release. PR not approved or missing 'release' label."
          exit 1

      - name: Generate token from GitHub App
        id: generate-token
        uses: tibdex/github-app-token@3beb63f4bd073e61482598c45c71c1019b59b73a # v2.1.0
        with:
          app_id: ${{ secrets.APP_PUSH_TAG_ID }}
          private_key: ${{ secrets.APP_PUSH_TAG_PRIVATE_KEY }}

      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          token: ${{ steps.generate-token.outputs.token }}
          fetch-tags: true
          fetch-depth: 0
          submodules: recursive

      - name: Extract repository name
        id: repo
        run: |
          echo "repo_name=$(basename "$GITHUB_REPOSITORY")" >> $GITHUB_ENV

      - name: Fetch Tags
        run: git fetch --tags

      - name: Check if Release Label is Set
        id: check_label
        run: |
          if jq -e '.pull_request != null' "$GITHUB_EVENT_PATH" > /dev/null; then
            labels=$(jq -r '.pull_request.labels // [] | .[].name' "$GITHUB_EVENT_PATH")
            if echo "$labels" | grep -q "release"; then
              echo "release_label_set=true" >> $GITHUB_ENV
            fi
          fi
          

      - name: Determine Next Version
        run: |
          if [[ "${{ env.release_label_set }}" == "true" ]]; then
            latest_tag=$(git describe --tags $(git rev-list --tags --max-count=1) 2>/dev/null || echo "v0.0.0")

            # Extract version components
            major=$(echo $latest_tag | cut -d. -f1 | tr -d 'v')
            minor=$(echo $latest_tag | cut -d. -f2)
            patch=$(echo $latest_tag | cut -d. -f3)

            if [[ $GITHUB_EVENT_NAME == "pull_request" ]]; then
              
              if jq -e '.pull_request != null' "$GITHUB_EVENT_PATH" > /dev/null; then
                labels=$(jq -r '.pull_request.labels // [] | .[].name' "$GITHUB_EVENT_PATH")
                if echo "$labels" | grep -q "major"; then
                  major=$((major + 1))
                  minor=0
                  patch=0
                elif echo "$labels" | grep -q "minor"; then
                  minor=$((minor + 1))
                  patch=0
                else
                  patch=$((patch + 1))
                fi
              fi
              
            fi

            vversion="v$major.$minor.$patch"
            version="$major.$minor.$patch"

            echo "vversion=$vversion" >> $GITHUB_ENV
            echo "version=$version" >> $GITHUB_ENV
            echo "$vversion" > VERSION

            if git rev-parse "refs/tags/$vversion" >/dev/null 2>&1; then
              echo "SKIP=true" >> $GITHUB_ENV
              exit 0
            fi
          fi

      - name: Generate Build Version
        if: ${{ env.SKIP != 'true' }}
        uses: hashicorp/actions-generate-metadata@f6f1ca9cededa05d841a58d171064faf3de8ec74 #main
        id: execute
        with:
          repositoryOwner: ${{ github.repository_owner }}
          repository: ${{ github.repository }}
          version: cat VERSION
          product: ${{ env.repo_name }}
          metadataFileName: ${{ github.workspace }}/build_version.json

      - name: Print Build Version
        if: ${{ env.SKIP != 'true' }}
        shell: bash
        run: cat ${{ github.workspace }}/build_version.json

      - name: Checkout build (taskfiles) repo
        if: ${{ env.SKIP != 'true' }}
        run: |
          git clone https://github.com/openkcm/build.git ./hack/common

      - name: Install Task
        if: ${{ env.SKIP != 'true' }}
        uses: arduino/setup-task@b91d5d2c96a56797b48ac1e0e89220bf64044611 #v2.0.0
        with:
          version: 3.x

      - name: Import GPG key
        if: ${{ env.SKIP != 'true' }}
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
        run: |
          echo "$GPG_PRIVATE_KEY" | gpg --batch --import
          echo "use-agent" >> ~/.gnupg/gpg.conf
          echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf
          echo "allow-loopback-pinentry" >> ~/.gnupg/gpg-agent.conf
          echo RELOADAGENT | gpg-connect-agent
          git config --global user.name "GitHub CI Bot"
          git config --global user.email "github-ci[bot]@users.noreply.github.com"
          git config --global user.signingkey "${{ secrets.GPG_KEY_ID }}"
          git config --global commit.gpgsign true
          git config --global tag.gpgSign true
          git config --global gpg.program gpg

      - name: Create Git tag
        if: ${{ env.SKIP != 'true' }}
        run: |
          git tag -a "${{ env.vversion }}" -m "Release ${{ env.vversion }}" --local-user "$(git config user.signingkey)"
          git push origin "${{ env.vversion }}"
        env:
          GITHUB_TOKEN: ${{ steps.generate-token.outputs.token }}

      - name: Build Changelog
        if: ${{ env.SKIP != 'true' }}
        id: github_release
        uses: mikepenz/release-changelog-builder-action@5fb6e51e44d4aea73f66549f425aa3ed5008109e # v5
        with:
          mode: "PR"
          configurationJson: |
            {
              "template": "#{{CHANGELOG}}",
              "pr_template": "- #{{TITLE}}: ##{{NUMBER}}",
              "categories": [
                {
                    "title": "## Feature",
                    "labels": ["feat", "feature"]
                },
                {
                    "title": "## Fix",
                    "labels": ["fix", "bug"]
                },
                {
                    "title": "## Other",
                    "labels": []
                }
              ],
              "label_extractor": [
                {
                  "pattern": "^(build|chore|ci|docs|feat|fix|perf|refactor|revert|style|test){1}(\\([\\w\\-\\.]+\\))?(!)?: ([\\w ])+([\\s\\S]*)",
                  "on_property": "title",
                  "target": "$1"
                }
              ]
            }

      - name: Generate SBOM
        if: ${{ env.SKIP != 'true' }}
        run: |
          task cyclonedxgomod:app --verbose

      - name: Create GitHub release
        if: ${{ env.SKIP != 'true' }}
        uses: softprops/action-gh-release@72f2c25fcb47643c292f7107632f7a47c1df5cd8 # v2.3.2
        with:
          tag_name: ${{ env.vversion }}
          name: Release ${{ env.vversion }}
          body: ${{steps.github_release.outputs.changelog}}
          files: "*sbom.json"
          draft: true
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ steps.generate-token.outputs.token }}
