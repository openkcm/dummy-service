name: Publish to GHCR
on:
  push:
    tags:
      - v*
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag to publish'
        required: false

permissions:
  packages: write

env:
  OCI_URL: ghcr.io/openkcm

jobs:
  release_tag:
    name: Release version
    runs-on: ubuntu-24.04
    steps:
      - name: Generate token from GitHub App
        id: generate-token
        uses: tibdex/github-app-token@3beb63f4bd073e61482598c45c71c1019b59b73a # v2.1.0
        with:
          app_id: ${{ secrets.APP_PUSH_TAG_ID }}
          private_key: ${{ secrets.APP_PUSH_TAG_PRIVATE_KEY }}

      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          token: ${{ steps.generate-token.outputs.token }}
          fetch-tags: true
          fetch-depth: 0
          submodules: recursive

      - name: Extract repository name
        id: repo
        run: |
          echo "repo_name=$(basename "$GITHUB_REPOSITORY")" >> $GITHUB_ENV

      - name: Fetch Tags
        run: git fetch --tags

      - name: Determine Next Version
        id: set-version
        run: |
          latest_tag=$(git describe --tags $(git rev-list --tags --max-count=1) 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $latest_tag"

          # Extract version components
          major=$(echo $latest_tag | cut -d. -f1 | tr -d 'v')
          minor=$(echo $latest_tag | cut -d. -f2)
          patch=$(echo $latest_tag | cut -d. -f3)

          echo "Current version: $major.$minor.$patch"

          if [[ $GITHUB_EVENT_NAME == "pull_request" ]]; then
            if jq -r '.pull_request.labels[].name' $GITHUB_EVENT_PATH | grep -q "major"; then
              major=$((major + 1))
              minor=0
              patch=0
            elif jq -r '.pull_request.labels[].name' $GITHUB_EVENT_PATH | grep -q "minor"; then
              minor=$((minor + 1))
              patch=0
            else
              patch=$((patch + 1))
            fi
          fi

          next_version="v$major.$minor.$patch"
          nacked_next_version="$major.$minor.$patch"
        
          echo "Next version: $next_version"

          echo "next_version=$next_version" >> $GITHUB_ENV
          echo "version=$next_version" >> $GITHUB_ENV
          echo "$next_version" > VERSION

      - name: Generate Build Version
        uses: hashicorp/actions-generate-metadata@f6f1ca9cededa05d841a58d171064faf3de8ec74 #main
        id: execute
        with:
          repositoryOwner: ${{ github.repository_owner }}
          repository: ${{ github.repository }}
          version: cat VERSION
          product: ${{ env.repo_name }}
          metadataFileName: ${{ github.workspace }}/build_version.json

      - name: Print Build Version
        shell: bash
        run: cat ${{ github.workspace }}/build_version.json

      - name: Checkout build (taskfiles) repo
        run: |
          git clone https://github.com/openkcm/build.git ./hack/common

      - name: Install Task
        uses: arduino/setup-task@b91d5d2c96a56797b48ac1e0e89220bf64044611 #v2.0.0
        with:
          version: 3.x
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0

      - name: Set up Docker Context for Buildx
        id: buildx-context
        run: |
          docker context create builders

      - name: Login to GitHub Container Registry
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        timeout-minutes: 5
        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3.10.0
        with:
          version: latest

      - name: Set up Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version-file: go.mod

      - name: Build and Push Images
        run: |
          task build:img:all --verbose

      - name: Package and Push Helm Charts
        run: |
          task build:helm:all --verbose

      - name: Build and Push OCM Component
        run: |
          task build:ocm:all --verbose

      - name: Remove VERSION file
        run: |
          rm -f VERSION
